== Syntax ==

=== Comments ===

Only one line comments are supported for now.

[source,ruby]
-------------
# This is a comment
-------------

=== Literals ===

[source,ruby]
-------------
# The only instance of the Nil class
nil

# The only instances of Bool
true
false

# Integers. Without a suffix they are instances of Int32
1234
1_000_000

# Hexadecimal
0xABCD_1234

# Binary
0b1010_0110

# With a suffix they can be Int64, UInt16, etc.
12_i64
45_u16

# Floats. Without a suffix they are instances of Float64
1234.56
123e-09

# With a suffix they can be Float32 or Float64
12.34_f32
68.91_f64

# Characters
'a'
'\n'

# With octal notation
'\033'

# Strings
"hello world"
"escapes: \n \t \\ \" etc.'
"octals: \123 \12 \8"
"hex: \x12"
"interpolation also allowed: 1 + 2 = #{1 + 2}"
%(this is also a string (supports nested parenthesis) as well as "quotes")

# Symbols
:foo
:"another symbol"

# Array
[1, 2, 3]

# Empty Array (must indicate element type)
[] of String

# Hash
{1 => 2, 3 => 4}
{"foo" => "bar"}
{:foo => 1}
{foo: 1} # same as above

# Empty Hash (must indicate key and value types)
{} of Symbol => Int32

# Ranges
1..5  # inclusive end
1...5 # exclusive end

# Regular expressions
/foo\s+bar/

# Tuples
{1, 'a', "hello"}
-------------

=== Assignments and variables ===

Variables must begin with lowercase. They are declared when you assign a value to them.

[source,ruby]
-------------
name = "Crystal"
age = 1
-------------

Their type is inferred from their usage, not only from their initializer.

=== Conditionals ===

You can use `if` and `unless`:

[source,ruby]
-------------
name = "Crystal"
age = 1

if name == "Crystal"
  # name is "Crystal"
end

if age == 1
  # age is 1
elsif age == 2
  # age is 2
else
  # age is neither 1 nor 2
end

unless age == 3
  # age is not 3
end
-------------

The `then` part of an `if` is executed if the condition is _truthy_. The `else` part of an `if`,
and the `then` part of an `unless` are executed if the condition is _falsy_. The only _falsy_ values
are `nil`, `false`, and a nil pointer. Anything else is _truthy_.

WARNING: If you come from C/C++, be warned that zero (0) is _truthy_.

Conditionals can also be used in a suffix fashion:

[source,ruby]
-------------
name = "Crystal"
age = 1

name = "Crystal!!" if name == "Crystal"
age = 2 unless age == 3
-------------

There is also a short form for the `if`, known as the ternary operator:

[source,ruby]
-------------
age = 1
old = age > 100 ? "yes" : "no"
-------------

=== Loops ===

`while` is the only syntax supported for loops. More complex loops can be built with blocks.

[source,ruby]
-------------
age = 1

while age < 10
  age += 1
end

# here age is 10
-------------

The condition is first evaluated, and if it is _truthy_ the body is executed while the condition
remains _truthy_.

If a `while` appears in a suffix fashion, the body is executed at least once:

[source,ruby]
-------------
age = 1
age += 1 while age < 0
# here age is 2
-------------

To achieve this last behaviour with more than one expression, use `begin` and `end`:

[source,ruby]
-------------
age = 1

begin
  age += 10
  age /= 2
end while age < 10
-------------
